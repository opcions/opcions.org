<?php

/**
 * @file
 * Contains opcions_collections.module..
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\node\Entity\Node;

const HOOK = 'opcions.collections.hook.';

/**
 * Implements hook_help().
 */
function opcions_collections_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the opcions_collections module.
    case 'help.page.opcions_collections':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Opcions collection tweaks for guides, series and revistas') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_entity_view().
 */
function opcions_collections_paragraph_view_alter(array &$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display)
{
  $service = HOOK . $entity->bundle();
  if( \Drupal::hasService($service) ) {
    \Drupal::service($service)->alter($build, $entity, $display);
  }

}

/**
 * Implements hook_preprocess_field().
 */
function opcions_collections_preprocess_field(&$variables)
{
  if($variables['element']['#field_name'] == 'field_node_reference') {

    foreach ($variables['element']['#items'] as $delta => $item) {

      $service = HOOK . $item->getFieldDefinition()->getTargetBundle();
      if( \Drupal::hasService($service) ) {
        \Drupal::service($service)->preprocess($variables, $item, $delta);
      }

    }

  }

}

/**
 * Implements hook_theme().
 */
function opcions_collections_theme($existing, $type, $theme, $path)
{
  return [
    'field__field_collection' => [
      'base hook' => 'field'
    ],
    'paragraph__collection_reference_as_quote' => [
      'base hook' => 'paragraph'
    ]

  ];
}

function template_preprocess_paragraph__collection_reference_as_quote(&$variables) {

  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['elements']['#paragraph'];

  $variables['quote'] = $paragraph->get('field_quote')->getString();
  $source  = $paragraph->get('field_quote_source')->getString();
  $cite = $source ?: null;
  $id = $paragraph->get('field_node_reference')->getString();
  $node = Node::load($id);
  $variables['link'] = \Drupal::service('entity.repository')->getTranslationFromContext($node)->toLink($cite);

}